///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class TransactionDetailResponseDataOrderProductImages {
/*
{
  "url": "https://storage.googleapis.com/halanesia_dev_v0/product/image/97/00adced5-de84-4a11-af24-962dca5ae0f0.jpg?GoogleAccessId=halanesia-be-dev%40halanesia-dev.iam.gserviceaccount.com&Expires=1651335617&Signature=SS%2FheiSEHvq%2F5zi74Jv4SDdQ0bZmT4T0mOM2mn1sQSJRbzWFQMV9mXexHLkvJDOgVGSV8qic4PGtoDwQLNg5eZvLot9NIg8rCJmYumAAcXmAuHjoopRsUtG8Xj7UW8QoRtW62Z6NPMGDkz%2Fd%2BIk2KBvb32qOwd%2BdPk2JtrIoM6qCmqqMnSj0PagJsjZnEhLLvEVasrp2ij%2FOtf0psbePgxAN8NgJ8t00fwoViz2H6JzC%2B42byXLTLTVrH6sFz8bIzIvCNBACgbcVuyRy%2Bp2CVqrhstzMelHC8ubT%2BmOV0hY3fo0ohGHbKbbotTuq%2Fo5VoQu%2FuIMtxfFIsDBgwtnQYg%3D%3D"
} 
*/

  String? url;

  TransactionDetailResponseDataOrderProductImages({
    this.url,
  });
  TransactionDetailResponseDataOrderProductImages.fromJson(Map<String, dynamic> json) {
    url = json['url']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['url'] = url;
    return data;
  }
}

class TransactionDetailResponseDataOrderProduct {
/*
{
  "order_product_id": "281",
  "product_id": "131",
  "product_detail_id": "145",
  "product_name": "Lemari",
  "quantity": 1,
  "images": [
    {
      "url": "https://storage.googleapis.com/halanesia_dev_v0/product/image/97/00adced5-de84-4a11-af24-962dca5ae0f0.jpg?GoogleAccessId=halanesia-be-dev%40halanesia-dev.iam.gserviceaccount.com&Expires=1651335617&Signature=SS%2FheiSEHvq%2F5zi74Jv4SDdQ0bZmT4T0mOM2mn1sQSJRbzWFQMV9mXexHLkvJDOgVGSV8qic4PGtoDwQLNg5eZvLot9NIg8rCJmYumAAcXmAuHjoopRsUtG8Xj7UW8QoRtW62Z6NPMGDkz%2Fd%2BIk2KBvb32qOwd%2BdPk2JtrIoM6qCmqqMnSj0PagJsjZnEhLLvEVasrp2ij%2FOtf0psbePgxAN8NgJ8t00fwoViz2H6JzC%2B42byXLTLTVrH6sFz8bIzIvCNBACgbcVuyRy%2Bp2CVqrhstzMelHC8ubT%2BmOV0hY3fo0ohGHbKbbotTuq%2Fo5VoQu%2FuIMtxfFIsDBgwtnQYg%3D%3D"
    }
  ]
} 
*/

  String? orderProductId;
  String? productId;
  String? productDetailId;
  String? productName;
  int? quantity;
  List<TransactionDetailResponseDataOrderProductImages?>? images;

  TransactionDetailResponseDataOrderProduct({
    this.orderProductId,
    this.productId,
    this.productDetailId,
    this.productName,
    this.quantity,
    this.images,
  });
  TransactionDetailResponseDataOrderProduct.fromJson(Map<String, dynamic> json) {
    orderProductId = json['order_product_id']?.toString();
    productId = json['product_id']?.toString();
    productDetailId = json['product_detail_id']?.toString();
    productName = json['product_name']?.toString();
    quantity = json['quantity']?.toInt();
  if (json['images'] != null) {
  final v = json['images'];
  final arr0 = <TransactionDetailResponseDataOrderProductImages>[];
  v.forEach((v) {
  arr0.add(TransactionDetailResponseDataOrderProductImages.fromJson(v));
  });
    images = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['order_product_id'] = orderProductId;
    data['product_id'] = productId;
    data['product_detail_id'] = productDetailId;
    data['product_name'] = productName;
    data['quantity'] = quantity;
    if (images != null) {
      final v = images;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['images'] = arr0;
    }
    return data;
  }
}

class TransactionDetailResponseDataOrderShipping {
/*
{
  "type": "trucking",
  "shipping_option_name": "JTR",
  "shipping_option_type": "Trucking",
  "shipping_option_desc": null,
  "shipping_option_full_desc": null,
  "weight": 10,
  "volume": 1000,
  "volume_weight": null,
  "final_weight": "10",
  "min_day": 3,
  "max_day": 4,
  "unit_price": 2500,
  "total_price": 25000,
  "discount": 0,
  "discount_value": 0,
  "discounted_price": 25000,
  "insurance_fee": 1622,
  "must_use_insurance": false,
  "liability_value": 250000,
  "final_price": 25000,
  "currency": "IDR",
  "insurance_applied": false
} 
*/

  String? type;
  String? shippingOptionName;
  String? shippingOptionType;
  String? shippingOptionDesc;
  String? shippingOptionFullDesc;
  int? weight;
  int? volume;
  String? volumeWeight;
  String? finalWeight;
  int? minDay;
  int? maxDay;
  int? unitPrice;
  int? totalPrice;
  int? discount;
  int? discountValue;
  int? discountedPrice;
  int? insuranceFee;
  bool? mustUseInsurance;
  int? liabilityValue;
  int? finalPrice;
  String? currency;
  bool? insuranceApplied;

  TransactionDetailResponseDataOrderShipping({
    this.type,
    this.shippingOptionName,
    this.shippingOptionType,
    this.shippingOptionDesc,
    this.shippingOptionFullDesc,
    this.weight,
    this.volume,
    this.volumeWeight,
    this.finalWeight,
    this.minDay,
    this.maxDay,
    this.unitPrice,
    this.totalPrice,
    this.discount,
    this.discountValue,
    this.discountedPrice,
    this.insuranceFee,
    this.mustUseInsurance,
    this.liabilityValue,
    this.finalPrice,
    this.currency,
    this.insuranceApplied,
  });
  TransactionDetailResponseDataOrderShipping.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    shippingOptionName = json['shipping_option_name']?.toString();
    shippingOptionType = json['shipping_option_type']?.toString();
    shippingOptionDesc = json['shipping_option_desc']?.toString();
    shippingOptionFullDesc = json['shipping_option_full_desc']?.toString();
    weight = json['weight']?.toInt();
    volume = json['volume']?.toInt();
    volumeWeight = json['volume_weight']?.toString();
    finalWeight = json['final_weight']?.toString();
    minDay = json['min_day']?.toInt();
    maxDay = json['max_day']?.toInt();
    unitPrice = json['unit_price']?.toInt();
    totalPrice = json['total_price']?.toInt();
    discount = json['discount']?.toInt();
    discountValue = json['discount_value']?.toInt();
    discountedPrice = json['discounted_price']?.toInt();
    insuranceFee = json['insurance_fee']?.toInt();
    mustUseInsurance = json['must_use_insurance'];
    liabilityValue = json['liability_value']?.toInt();
    finalPrice = json['final_price']?.toInt();
    currency = json['currency']?.toString();
    insuranceApplied = json['insurance_applied'];
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    data['shipping_option_name'] = shippingOptionName;
    data['shipping_option_type'] = shippingOptionType;
    data['shipping_option_desc'] = shippingOptionDesc;
    data['shipping_option_full_desc'] = shippingOptionFullDesc;
    data['weight'] = weight;
    data['volume'] = volume;
    data['volume_weight'] = volumeWeight;
    data['final_weight'] = finalWeight;
    data['min_day'] = minDay;
    data['max_day'] = maxDay;
    data['unit_price'] = unitPrice;
    data['total_price'] = totalPrice;
    data['discount'] = discount;
    data['discount_value'] = discountValue;
    data['discounted_price'] = discountedPrice;
    data['insurance_fee'] = insuranceFee;
    data['must_use_insurance'] = mustUseInsurance;
    data['liability_value'] = liabilityValue;
    data['final_price'] = finalPrice;
    data['currency'] = currency;
    data['insurance_applied'] = insuranceApplied;
    return data;
  }
}

class TransactionDetailResponseDataOrderAddress {
/*
{
  "order_address_id": "3",
  "address_name": "Rumah",
  "address_1": "sudirman",
  "address_2": "kode",
  "area": null,
  "suburb": null,
  "city": "Jakarta Pusat",
  "state": "DKI Jakarta",
  "country": "INDONESIA",
  "postal_code": "10650",
  "note": null
} 
*/

  String? orderAddressId;
  String? addressName;
  String? address_1;
  String? address_2;
  String? area;
  String? suburb;
  String? city;
  String? state;
  String? country;
  String? postalCode;
  String? note;

  TransactionDetailResponseDataOrderAddress({
    this.orderAddressId,
    this.addressName,
    this.address_1,
    this.address_2,
    this.area,
    this.suburb,
    this.city,
    this.state,
    this.country,
    this.postalCode,
    this.note,
  });
  TransactionDetailResponseDataOrderAddress.fromJson(Map<String, dynamic> json) {
    orderAddressId = json['order_address_id']?.toString();
    addressName = json['address_name']?.toString();
    address_1 = json['address_1']?.toString();
    address_2 = json['address_2']?.toString();
    area = json['area']?.toString();
    suburb = json['suburb']?.toString();
    city = json['city']?.toString();
    state = json['state']?.toString();
    country = json['country']?.toString();
    postalCode = json['postal_code']?.toString();
    note = json['note']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['order_address_id'] = orderAddressId;
    data['address_name'] = addressName;
    data['address_1'] = address_1;
    data['address_2'] = address_2;
    data['area'] = area;
    data['suburb'] = suburb;
    data['city'] = city;
    data['state'] = state;
    data['country'] = country;
    data['postal_code'] = postalCode;
    data['note'] = note;
    return data;
  }
}

class TransactionDetailResponse {
/*
{
  "order_id": "234",
  "merchant_name": "Toko Jual Apa Saja",
  "is_official": false,
  "is_verified": false,
  "is_accepted": false,
  "accepted_date": null,
  "shipped_date": null,
  "amount": 675000,
  "total_item_price": 649000,
  "shipping_price": 25000,
  "voucher_discount": 0,
  "insurance_price": 0,
  "layanan_price": 1000,
  "payment_url": "https://sandbox.doku.com/checkout/link/20220430165133462612520220330230352521",
  "payment_expiry_date": "2022-04-30T23:06:46.000Z",
  "created_date": "2022-04-30T16:03:46.000Z",
  "updated_date": "2022-04-30T16:03:53.000Z",
  "status_name": "Menunggu Pembayaran",
  "status_desc": "menunggu pembayaran",
  "status_code": "WAITING_PAYMENT",
  "order_address": {
    "order_address_id": "3",
    "address_name": "Rumah",
    "address_1": "sudirman",
    "address_2": "kode",
    "area": null,
    "suburb": null,
    "city": "Jakarta Pusat",
    "state": "DKI Jakarta",
    "country": "INDONESIA",
    "postal_code": "10650",
    "note": null
  },
  "order_shipping": {
    "type": "trucking",
    "shipping_option_name": "JTR",
    "shipping_option_type": "Trucking",
    "shipping_option_desc": null,
    "shipping_option_full_desc": null,
    "weight": 10,
    "volume": 1000,
    "volume_weight": null,
    "final_weight": "10",
    "min_day": 3,
    "max_day": 4,
    "unit_price": 2500,
    "total_price": 25000,
    "discount": 0,
    "discount_value": 0,
    "discounted_price": 25000,
    "insurance_fee": 1622,
    "must_use_insurance": false,
    "liability_value": 250000,
    "final_price": 25000,
    "currency": "IDR",
    "insurance_applied": false
  },
  "order_product": [
    {
      "order_product_id": "281",
      "product_id": "131",
      "product_detail_id": "145",
      "product_name": "Lemari",
      "quantity": 1,
      "images": [
        {
          "url": "https://storage.googleapis.com/halanesia_dev_v0/product/image/97/00adced5-de84-4a11-af24-962dca5ae0f0.jpg?GoogleAccessId=halanesia-be-dev%40halanesia-dev.iam.gserviceaccount.com&Expires=1651335617&Signature=SS%2FheiSEHvq%2F5zi74Jv4SDdQ0bZmT4T0mOM2mn1sQSJRbzWFQMV9mXexHLkvJDOgVGSV8qic4PGtoDwQLNg5eZvLot9NIg8rCJmYumAAcXmAuHjoopRsUtG8Xj7UW8QoRtW62Z6NPMGDkz%2Fd%2BIk2KBvb32qOwd%2BdPk2JtrIoM6qCmqqMnSj0PagJsjZnEhLLvEVasrp2ij%2FOtf0psbePgxAN8NgJ8t00fwoViz2H6JzC%2B42byXLTLTVrH6sFz8bIzIvCNBACgbcVuyRy%2Bp2CVqrhstzMelHC8ubT%2BmOV0hY3fo0ohGHbKbbotTuq%2Fo5VoQu%2FuIMtxfFIsDBgwtnQYg%3D%3D"
        }
      ]
    }
  ]
} 
*/

  String? orderId;
  String? merchantName;
  bool? isOfficial;
  bool? isVerified;
  bool? isAccepted;
  String? acceptedDate;
  String? shippedDate;
  int? amount;
  int? totalItemPrice;
  int? shippingPrice;
  int? voucherDiscount;
  int? insurancePrice;
  int? layananPrice;
  String? paymentUrl;
  String? paymentExpiryDate;
  String? createdDate;
  String? updatedDate;
  String? statusName;
  String? statusDesc;
  String? statusCode;
  TransactionDetailResponseDataOrderAddress? orderAddress;
  TransactionDetailResponseDataOrderShipping? orderShipping;
  List<TransactionDetailResponseDataOrderProduct?>? orderProduct;

  TransactionDetailResponse({
    this.orderId,
    this.merchantName,
    this.isOfficial,
    this.isVerified,
    this.isAccepted,
    this.acceptedDate,
    this.shippedDate,
    this.amount,
    this.totalItemPrice,
    this.shippingPrice,
    this.voucherDiscount,
    this.insurancePrice,
    this.layananPrice,
    this.paymentUrl,
    this.paymentExpiryDate,
    this.createdDate,
    this.updatedDate,
    this.statusName,
    this.statusDesc,
    this.statusCode,
    this.orderAddress,
    this.orderShipping,
    this.orderProduct,
  });
  TransactionDetailResponse.fromJson(Map<String, dynamic> json) {
    orderId = json['order_id']?.toString();
    merchantName = json['merchant_name']?.toString();
    isOfficial = json['is_official'];
    isVerified = json['is_verified'];
    isAccepted = json['is_accepted'];
    acceptedDate = json['accepted_date']?.toString();
    shippedDate = json['shipped_date']?.toString();
    amount = json['amount']?.toInt();
    totalItemPrice = json['total_item_price']?.toInt();
    shippingPrice = json['shipping_price']?.toInt();
    voucherDiscount = json['voucher_discount']?.toInt();
    insurancePrice = json['insurance_price']?.toInt();
    layananPrice = json['layanan_price']?.toInt();
    paymentUrl = json['payment_url']?.toString();
    paymentExpiryDate = json['payment_expiry_date']?.toString();
    createdDate = json['created_date']?.toString();
    updatedDate = json['updated_date']?.toString();
    statusName = json['status_name']?.toString();
    statusDesc = json['status_desc']?.toString();
    statusCode = json['status_code']?.toString();
    orderAddress = (json['order_address'] != null) ? TransactionDetailResponseDataOrderAddress.fromJson(json['order_address']) : null;
    orderShipping = (json['order_shipping'] != null) ? TransactionDetailResponseDataOrderShipping.fromJson(json['order_shipping']) : null;
  if (json['order_product'] != null) {
  final v = json['order_product'];
  final arr0 = <TransactionDetailResponseDataOrderProduct>[];
  v.forEach((v) {
  arr0.add(TransactionDetailResponseDataOrderProduct.fromJson(v));
  });
    orderProduct = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['order_id'] = orderId;
    data['merchant_name'] = merchantName;
    data['is_official'] = isOfficial;
    data['is_verified'] = isVerified;
    data['is_accepted'] = isAccepted;
    data['accepted_date'] = acceptedDate;
    data['shipped_date'] = shippedDate;
    data['amount'] = amount;
    data['total_item_price'] = totalItemPrice;
    data['shipping_price'] = shippingPrice;
    data['voucher_discount'] = voucherDiscount;
    data['insurance_price'] = insurancePrice;
    data['layanan_price'] = layananPrice;
    data['payment_url'] = paymentUrl;
    data['payment_expiry_date'] = paymentExpiryDate;
    data['created_date'] = createdDate;
    data['updated_date'] = updatedDate;
    data['status_name'] = statusName;
    data['status_desc'] = statusDesc;
    data['status_code'] = statusCode;
    if (orderAddress != null) {
      data['order_address'] = orderAddress!.toJson();
    }
    if (orderShipping != null) {
      data['order_shipping'] = orderShipping!.toJson();
    }
    if (orderProduct != null) {
      final v = orderProduct;
      final arr0 = [];
  for (var v in v!) {
  arr0.add(v!.toJson());
  }
      data['order_product'] = arr0;
    }
    return data;
  }
}

